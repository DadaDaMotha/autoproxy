stages:
  - pull
  - build
  - lint
  - test
  - coverage
  - push
  - shutdown
  - cleanup
  - deploy


before_script:
  - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"

pull:
  stage: pull
  script:
    - docker pull "$CI_REGISTRY_IMAGE":latest
  allow_failure: true

build:
  stage: build
  script:
    - docker build --tag="$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" --cache-from="$CI_REGISTRY_IMAGE":latest .

push image:
  stage: push
  only:
    - master
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":"$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_REF_NAME"

push latest:
  stage: push
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":latest
    - docker push "$CI_REGISTRY_IMAGE":latest

cleanup:
  stage: cleanup
  when: always
  script:
    - docker rmi -f "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" # e.g 49896469:prepare_cicd = name of branch
    - echo $(docker images --filter "dangling=true" -q --no-trunc)
    - echo $(docker images | grep "none" | awk '/ / { print $3 }')

deploy :
  stage: deploy
  when: manual
  script:
    - echo "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    - docker-compose -f docker-compose.deploy.yml pull
    - docker-compose -f docker-compose.deploy.yml down --remove-orphans
    - docker-compose -f docker-compose.deploy.yml up -d

shutdown:
  stage: deploy
  when: manual
  script:
    - docker-compose -f docker-compose.deploy.yml down
