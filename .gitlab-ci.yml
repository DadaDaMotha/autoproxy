---
variables:
  # change this to any other registry, e.g. 999999917775.dkr.ecr.eu-central-1.amazonaws.com/autoproxy
  REGISTRY_IMAGE: $CI_REGISTRY_IMAGE
  BRANCH: $CI_COMMIT_REF_NAME

stages:
  - pull
  - build
  - push
  - deploy

# Example for AWS cloud
#before_script:
#  - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $REGISTRY_IMAGE

before_script:
  - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"

pull:
  stage: pull
  script:
    - docker pull "$REGISTRY_IMAGE":latest
  allow_failure: true

build:
  stage: build
  script:
    - docker build --tag="$CI_PIPELINE_ID":"$BRANCH" --cache-from="$REGISTRY_IMAGE":latest .

push image:
  stage: push
  only:
    - master
  script:
    - docker tag "$CI_PIPELINE_ID":"$BRANCH" "$REGISTRY_IMAGE":"$BRANCH"
    - docker push "$REGISTRY_IMAGE":"$BRANCH"

push latest:
  stage: push
  script:
    - docker tag "$CI_PIPELINE_ID":"$BRANCH" "$REGISTRY_IMAGE":latest
    - docker push "$REGISTRY_IMAGE":latest

deploy :
  stage: deploy
  when: manual
  script:
    - export REGISTRY_IMAGE=$REGISTRY_IMAGE
    - export BRANCH=$BRANCH
    - docker-compose pull
    - docker-compose down --remove-orphans
    - docker-compose up -d

cleanup:
  stage: deploy
  when: always
  script:
    - docker rmi -f "$CI_PIPELINE_ID":"$BRANCH" # e.g 49896469:prepare_cicd = name of branch
    - echo $(docker images --filter "dangling=true" -q --no-trunc)
    - echo $(docker images | grep "none" | awk '/ / { print $3 }')

# First time around, you can create the external networks by triggering this stage
init:
  stage: deploy
  when: manual
  script:
    - ./create_networks.sh

shutdown:
  stage: deploy
  when: manual
  script:
    - docker-compose down
